# Spring 어노테이션 정리

---

> [참고 사이트1](https://melonicedlatte.com/2021/07/18/182600.html)

### 어노테이션이란?

- Java5부터 새롭게 추가된 문법요소로, 사전적으로는 "주석"이라는 의미를 가지고 있으며, 자바 코드에 @를 이용해 주석처럼 달아 특수한 의미를 부여해준다.
  - 어노테이션을 이용해 Spring Framework가 해당 클래스가 어떤 역할인지 정하기도 하고, Bean을 주입하기도 하며, 자동으로 getter나 setter를 생성하기도 한다. 
- 프로그램 코드의 일부가 아닌 프로그램에 관한 데이터를 제공하고, 코드에 정보를 추가하는 정형화된 방법이다. 
  - 자바 소스 코드에 추가하여 사용할 수 있는 메타데이터의 일종으로 보면된다. 

### 동작방식

- 작성한 클래스에 @Service 어노테이션등을 달아주면 해당 클래스를 **루트 컨테이너**에 **Bean 객체로 생성**해준다.

### 역할

- 컴파일러에게 코드 작성 문법 에러를 체크하도록 정보를 제공한다.
- 실행시(런타임시)특정 기능을 실행하도록 정보를 제공한다.
- 코드가 실행되는 중에 **Reflection**을 이용하여 추가 정보를 획득하여 기능을 실시한다.

### Reflection

- Spring에서 BeanFactory라는 Container에서 객체가 호출되면 객체의 인스턴스를 생성하게 되는데 이 때 필요하게 된다. 
- 즉, 프레임워크에서 유연성있는 동작을 위해 쓰인다.

### 장점

- **코드량이 감소하고 유지보수하기 쉬우며, 생산성이 증가**한다.

### 종류

1. @Deprecated

   - 기존 사용되던 **클래스와 메서드의 사용을 금지(자제) 시킬 때 사용**한다. 

     - 해당 코드를 다른 곳에서 리팩토링 할 때 , 기존 사용되던 코드의 사용을 막아야하는데, 이때 코드수정만을 통해 해도 되지만 혹시 모르는 에러가 발생할 수 있다. 
     - 따라서 이러한 에러를 줄이기 위해 사용되는 것으로, 사용하지 않도록 경고( 코드에 줄긋기 표시 나타남 ) 시킬 수 있다. 

   - 하지만 **여전히 코드를 실행하고 컴파일 할 수 있다**. 하지만 해당 코드를 사용하면 **'개발도구' 에서 경고 메시지**가 표시되는것을 알수있다.  

     - 예시

       ```JAVA
       /**
        * @deprecated ... 이와 같은 이유로 삭제되어질 예정입니다.
        */
       @Deprecated
       public class DeprecatedClass {
       
       };
       ```

2. @SuppressWarnings("deprecation")

   1. 자바 코드에서 특정 경고 메시지를 억제(suppress)하기 위해 사용
      1. 다양한 경고 유형을 무시할때 사용함 

   2. 예시로, @SuppressWarnings("deprecation")는 `deprecation` 메시지에 대한 경고를 무시한다는 의미 
      1. 즉, @Deprecated 과 같은 의미로 사용할 수 있다. 

3. @Service

   - 비지니스 로직이 들어가는 Service로 사용되는 클래스임을 명시하는 어노테이션
   - **Service의 역할은 Dao가 DB에서 받아온 데이터를 전달받아 가공**하는 것

4. @Resource

5. @Repository

   - **DAO class**와 **DataBase에 접근하는 method를 가지고 있는 Class에서 쓰인다.**
   - DB연동 작업을 하는 클래스인 DAO에 특화된 어노테이션으로, 해당 클래스에서 발생하는 DB 관련 예외를 spring의 DAOException으로 전환할 수 있는 장점이 있다. 

6. @Autowired

   - Bean을 주입받기 위해 사용한다. 

7. @RequestMapping

   - 요청 들어온 URI의 요청과 Annotation value 값이 일치하면 해당 클래스나 메소드가 실행된다. 

   - @RequestMapping(value=”“) 의 형태를 가진다. 

   - 예시 

     ```java
     @Controller                   // 이 Class는 Controller 역할을 합니다
     @RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
     public class UserController {
         @RequestMapping(method = RequestMethod.GET)
         public String getUser(Model model) {
             //  GET method, /user 요청을 처리
         }
         @RequestMapping(method = RequestMethod.POST)
         public String addUser(Model model) {
             //  POST method, /user 요청을 처리
         }
         @RequestMapping(value = "/info", method = RequestMethod.GET)
         public String addUser(Model model) {
             //  GET method, /user/info 요청을 처리
         }
     }
     ```

   - 해당 어노테이션을 단축할 수 있는것으로는 @GetMapping, @PostMapping , @PutMapping, @DeleteMapping, @PatchMapping 이 있다. 

     - 예시

       ```java
       @Controller                   // 이 Class는 Controller 역할을 합니다
       @RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
       public class UserController {
           @RequestMapping(method = RequestMethod.POST)
           public String addUser(Model model) {
               //  POST method, /user 요청을 처리
           }
       
           ////////////////////////////////////
           // 위와 아래 메소드는 동일하게 동작합니다. //
           ////////////////////////////////////
       
           @PostMapping('/')
           public String addUser(Model model) {
               //  POST method, /user 요청을 처리
           }
       }
       ```

8. @RequestParam

   - URL에 전달되는 파라미터를 메소드의 인자와 매칭시켜, 파라미터를 받아서 처리할 수 있는 Annotation이다.

     - 예시

       ```java
       @Controller                   // 이 Class는 Controller 역할을 합니다
       @RequestMapping("/user")      // 이 Class는 /user로 들어오는 요청을 모두 처리합니다.
       public class UserController {
           @RequestMapping(method = RequestMethod.GET)
           public String getUser(@RequestParam String nickname, @RequestParam(name="old") String age {
               // Json 형식의 Body를 MessageConverter를 통해 Java 객체로 변환
               // GET method, /user 요청을 처리
               // https://naver.com?nickname=dog&old=10
               String sub = nickname + "_" + age;
               ...
           }
       }
       ```

9. @Component

   - 생성한 Class를 Spring의 Bean으로 등록할 때 사용하는 Annotation이다. 

   - 따라서 VO 같은것을 bean으로 등록할 떄 이용한다.

     - Controller, Service, DAO 같은곳에서는 사용이 권장되지 않는다. 

   - 예시 

     ```java
     @Component(value="myman")
     public class Man {
         public Man() {
             System.out.println("hi");
         }
     }
     ```

10. @Configuration 

   - Spring이 해당 클래스를 설정 클래스로 인식하도록 한다. 
   - 역할: `@Configuration` 어노테이션은 클래스를 스프링의 IoC 컨테이너에 의해 관리되는 빈 정의 소스로 표시
   - 사용 목적: 애플리케이션 컨텍스트를 설정하고 구성하는 데 사용됩니다. 이를 통해 XML 설정 파일을 대체하거나 함께 사용할 수 있다. 
   - 스프링 프레임워크의 핵심 설정 방식 중 하나로, 애플리케이션 컨텍스트를 프로그래밍 방식으로 설정하는 데 사용되어 애플리케이션 설정을 명확하고 안전하게 관리할 수 있게 한다. 

### Spring 어노테이션 컨테이너 등록

```xml
<context:annotation-config />
    <context:component-scan base-package="com.mesim.ids">
       <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
       <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
</context:component-scan>
```

- `component-scan` 태그는 지정된 패키지에서 어노테이션이 적용된 클래스를 찾아 Spring 컨테이너에 등록하고, `include-filter`를 사용하여 특정 어노테이션을 필터링하여 등록 대상에 포함시킨다.
- 이를 통해 컴포넌트들이 자동으로 관리되고 의존성 주입이 가능해진다. 
- 역할 
  1. `<context:annotation-config />`
     - Spring의 어노테이션을 사용하기 위한 설정을 활성화하는 역할을 합니다. 
     - `@Autowired`, `@Component`, `@Service`, `@Repository` 등과 같은 어노테이션을 사용하여 의존성 주입 및 컴포넌트 스캔을 가능하게 한다. 
  2. `<context:component-scan base-package="com.mesim.ids">`
     - 지정된 패키지에서 **컴포넌트를 스캔**하고, 해당 컴포넌트를 **Spring 컨테이너에 등록하는 역할**을 한다.
     - `base-package` 속성은 스캔할 패키지를 지정하는 것이다. 
  3. `<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>`
     - `@Service` **어노테이션이 붙은** 클래스를 **컴포넌트 스캔 대상에 포함**시키는 역할을 한다. 
     - `type` 속성은 포함 필터의 종류를 지정하고, `expression` 속성은 어노테이션의 표현식을 지정한다.
  4. `<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>`
     - `@Repository` 어노테이션이 붙은 클래스를 컴포넌트 스캔 대상에 포함시키는 역할을 한다. 

